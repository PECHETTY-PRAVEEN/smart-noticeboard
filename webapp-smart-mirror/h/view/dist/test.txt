
class Employee {
    private String id;
    private String name;
    private int salary;
    
 
    public Employee(String id, String name,int salary) { // constructor
           this.id = id;
           this.name = name;
           this.salary=salary;
    }
 
    @Override
    public String toString() {
           return "Employee [id=" + id + ", name=" + name + ",salary="+ salary +"]   ";
    }
    
}
 
 
class LinkedListEmptyException extends RuntimeException{
       public LinkedListEmptyException(){
         super();
       }
      
     public LinkedListEmptyException(String message){
         super(message);
       }  
}
 
class Node<T> {
    public T data; // data in Node.
    public Node<T> next; // points to next Node in list.
 
  
    public Node(T data){
           this.data = data;
    }
 
    public void displayNode() {
           System.out.print( data + " ");
    }
}
 
 

class LinkedList<T> {
    private Node<T> first; // ref to first link on list
 
    /**
     * LinkedList constructor
     */
    public LinkedList(){
           first = null;
    }
 
   
    public void insertFirst(T data) {
           Node<T> newNode = new Node<T>(data);  //Creation of New Node.
           newNode.next = first;   //newLink ---> old first
           first = newNode;  //first ---> newNode
    }
 
    /**
     * Deletes first Node
     */
    public Node<T> deleteFirst()
    {
           if(first==null){  //means LinkedList in empty, throw exception.              
                  throw new LinkedListEmptyException("LinkedList doesn't contain any Nodes.");
           }
           Node<T> tempNode = first; // save reference to first Node in tempNode- so that we could return saved reference.
           first = first.next; // delete first Node (make first point to second node)
           return tempNode; // return tempNode (i.e. deleted Node)
    }
    
           
    /**
     * Display LinkedList
     */
    public void displayLinkedList() {
           System.out.print("Displaying LinkedList [first--->last]: ");
           Node<T> tempDisplay = first; // start at the beginning of linkedList
           while (tempDisplay != null){ // Executes until we don't find end of list.
                  tempDisplay.displayNode();
                  tempDisplay = tempDisplay.next; // move to next Node
           }
           System.out.println();
           
    }
 
}
 
  
/** Copyright (c), AnkitMittal JavaMadeSoEasy.com */
/**
 * Main class - To test LinkedList.
 */
public class SinglyLinkedListGenericExample {
    public static void main(String[] args) {
           LinkedList<Employee> linkedList = new LinkedList<Employee>(); // creation of Linked List
           
           linkedList.insertFirst(new Employee("11", "sam",1000));
           linkedList.insertFirst(new Employee("21", "amy",2000));
           linkedList.insertFirst(new Employee("59", "katy",3000));
           linkedList.insertFirst(new Employee("14", "sai",4000));
           linkedList.insertFirst(new Employee("39", "pat",5000));
 
           linkedList.displayLinkedList(); // display LinkedList
                        
           System.out.print("Deleted Nodes: ");
           Node<Employee> deletedNode = linkedList.deleteFirst(); //delete Node
           deletedNode.displayNode();                                 //display deleted Node.
           deletedNode = linkedList.deleteFirst();      //delete Node.
           deletedNode.displayNode();                                 //display deleted Node.
           
           System.out.println();// sysout used to format output
           linkedList.displayLinkedList(); //Again display LinkedList
           
           
           
 
    }
}
